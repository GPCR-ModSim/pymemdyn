#!/usr/bin/env python3
import argparse
import os

import settings
from run import Run

import logging

if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        prog='pymemdyn',
        description=' == Setup Molecular Dynamics for Membrane Proteins given a PDB. == ')

    parser.add_argument('-v', '--version',
                        action='version',
                        version='%(prog)s 1.6.1')

    parser.add_argument('-b',
                        dest = "own_dir",
                        help = "Working dir if different from actual dir",
                        default = os.getcwd())

    parser.add_argument('-r',
                        dest = "repo_dir",
                        help = "Path to templates of fixed files. If not \
            provided, take the value from settings.TEMPLATES_DIR.",
                        default = settings.TEMPLATES_DIR)

    parser.add_argument('-p',
                        dest = "pdb",
                        required = True,
                        help = "Name of the pdb to insert into membrane for MD (mandatory). \
            Use the pdb extension. (e.g. -p myprot.pdb)")

    parser.add_argument('-l', '--lig',
                        dest = "ligand",
                        help = "Name of the ligand, without extension. See input_guide.txt \
            for details on how to generate the required pdb and forcefield files.")

    parser.add_argument('-a', "--alo",
                        dest = "allosteric",
                        help = "Name of the allosteric, without extension. See input_guide.txt \
            for details on how to generate the required pdb and forcefield files.")
    
    parser.add_argument('--na',
                        dest = 'nr_alo',
                        help = "number of identical allosteric molecules (with same .itp file)")
    
    parser.add_argument('-w','--waters',
                        dest = "waters",
                        help = "Crystalized water molecules. File name without extension.")

    parser.add_argument('-i', '--ions',
                        dest = "ions",
                        help = "Crystalized ions file name without extension.")

    parser.add_argument('-c', '--cho',
                        dest = "cho",
                        help = "Crystalized cholesterol molecules file name\
            without extension.")
            
    parser.add_argument('--res',
                        dest = "restraint",
                        help = "Position restraints during MD production run. Options: bw \
            (Ballesteros-Weinstein Restrained Relaxation - default), ca (C-Alpha Restrained \
            Relaxation)",
                        default = "bw")
    
    parser.add_argument('--llc',
                        dest = "ligpargen_ligand_charge",
                        help = "Charge of ligand for ligpargen (when itp file should be \
            generated)")
    
    parser.add_argument('--llo',
                        dest = "ligpargen_ligand_nrOfOptimizations",
                        help = "Number of optimizations that ligpargen should use to generate \
            itp file for ligand (only needed when itp is not provided)")
    
    parser.add_argument('--lac',
                        dest = "ligpargen_allosteric_charge",
                        help = "Charge of allosteric for ligpargen (when itp file should be \
            generated)")
    
    parser.add_argument('--lao',
                        dest = "ligpargen_allosteric_nrOfOptimizations",
                        help = "Number of optimizations that ligpargen should use to generate \
            itp file for allosteric (only needed when itp is not provided)")
    
    parser.add_argument('-q', '--queue',
                        dest = "queue",
                        help = "Queueing system to use (slurm, pbs, pbs_ib and svgd supported)",
                        default = "")

    parser.add_argument('-d', '--debug',
                        action="store_true")
    
    parser.add_argument('--debugFast',
                        help = "run pymemdyn in debug mode with less min and eq steps.\
                            Do not use for simulation results!",
                        action="store_true")

    args = parser.parse_args()

    ######## CREATE LOG ###########

    # create logger with name 'pymemdyn'
    logger = logging.getLogger('pymemdyn')

    # create file handler which logs to info messages normally and debug messages when in debug mode.
    with open('log.log', 'w+'):
        pass
    fh = logging.FileHandler('log.log')

    if args.debug or args.debugFast:
        logger.setLevel(logging.DEBUG)
        if args.debugFast:
            logger.warning('WARNING: Debug mode activated, do not use for simulations!')
        fh.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
        fh.setLevel(logging.INFO)

    # create console handler with a higher log level
    ch = logging.StreamHandler()
    ch.setLevel(logging.WARNING)
    # create formatter and add it to the handlers
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d,%H:%M:%S')
    fh.setFormatter(formatter)
    ch.setFormatter(formatter)
    # add the handlers to the logger
    logger.addHandler(fh)
    logger.addHandler(ch)

    ########### LOG CREATED ##############


    logger.info("Pymemdyn started.")

    logger.debug('Parsing finished.')

    if not (os.path.isdir(args.own_dir)):
        os.makedirs(args.own_dir)
        logger.info("Created working dir {0}".format(args.own_dir))
    os.chdir(args.own_dir)

    # Removes files previously generated in Run()
    to_unlink = [''.join([args.pdb[:-4], "-his.pdb"]), 
                 ''.join([args.pdb, "~"])]
   
    for target in to_unlink:
        if os.path.isfile(target): 
            os.unlink(target)
            logger.debug('Removed old file: {}'.format(target))

    run = Run(own_dir = args.own_dir,
              repo_dir = args.repo_dir,
              pdb = args.pdb,
              ligand = args.ligand,
              allosteric = args.allosteric,
              nr_alo = args.nr_alo,
              waters = args.waters,
              ions = args.ions,
              cho = args.cho,
              restraint = args.restraint,
              ligpargen_ligand_charge = args.ligpargen_ligand_charge,
              ligpargen_ligand_nrOfOptimizations = args.ligpargen_ligand_nrOfOptimizations,
              ligpargen_allosteric_charge = args.ligpargen_allosteric_charge,
              ligpargen_allosteric_nrOfOptimizations = args.ligpargen_allosteric_nrOfOptimizations,
              queue = args.queue,
              debug = args.debug)


    run.clean()
    # Rewrite old GROMACS.log file if on a re-run
    f = open("GROMACS.log", "w")
    f.close()


    run.moldyn()

    if not (args.debug or args.debugFast):
        run.clean()

    logger.info('Done!')
#    run.light_moldyn()